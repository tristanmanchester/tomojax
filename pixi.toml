[project]
authors = ["Tristan Manchester <tristan.manchester@diamond.ac.uk>"]
name = "tomojax"
version = "0.1.0"
channels = ["conda-forge", "nvidia"]
platforms = ["linux-64"]

[dependencies]
python = "3.12.*"
tifffile = ">=2025.8.28,<2026"
matplotlib = ">=3.10.5,<4"
numpy = ">=2.3.2,<3"
scikit-image = ">=0.25.2,<0.26"
psutil = ">=7.0.0,<8"
scipy = ">=1.16.1,<2"
tqdm = ">=4.67.1,<5"
cudnn = "*"
h5py = ">=3.14.0,<4"
pytest = ">=8,<9"
pip = ">=25.2,<26"

[pypi-dependencies]
jax = { version = ">=0.5.3,<0.6", extras = ["cuda12"] }
optax = "*"

[system-requirements]
cuda = "12"

[tasks]
test-gpu = "python -c \"import jax; print(f'JAX backend: {jax.default_backend()}'); print(f'Devices: {jax.devices()}')\""
test-cpu = "JAX_PLATFORM_NAME=cpu python -c \"import jax; print(f'JAX backend: {jax.default_backend()}'); print(f'Devices: {jax.devices()}')\""

# Root install and tests
install-root = "pip install -e ."
test = "pytest -q tests"
test-multires = "pytest -q tests/test_multires.py"

# Examples using tomojax CLI modules
convert-example = "python -m tomojax.cli.convert --in data/sim.npz --out data/sim.nxs"
simulate-example = "python -m tomojax.cli.simulate --nx 32 --ny 32 --nz 32 --nu 32 --nv 32 --n-views 16 --geometry parallel --phantom random_shapes --n-cubes 8 --n-spheres 8 --min-size 3 --max-size 8 --out data/sim_v2.nxs"
recon-example = "python -m tomojax.cli.recon --data data/sim_v2.nxs --algo fbp --filter ramp --out runs/fbp_v2.nxs"
align-example = "python -m tomojax.cli.align --data data/sim_v2.nxs --outer-iters 2 --recon-iters 5 --lambda-tv 0.001 --out runs/align_v2.nxs"

# Convenience pass-through tasks (accept additional args)
simulate = "python -m tomojax.cli.simulate"
misalign = "python -m tomojax.cli.misalign"
recon = "python -m tomojax.cli.recon"
align = "python -m tomojax.cli.align"
convert = "python -m tomojax.cli.convert"

# (No legacy aliases; v2 is primary)

# Performance harness
perf-sweep = "python scripts/perf_harness.py --data data/sim_v2.nxs --outdir runs/perf"
perf-demo = "python -m tomojax.cli.simulate --nx 64 --ny 64 --nz 64 --nu 64 --nv 64 --n-views 128 --geometry parallel --phantom random_shapes --n-cubes 16 --n-spheres 16 --min-size 4 --max-size 12 --out data/sim_perf.nxs && python scripts/perf_harness.py --data data/sim_perf.nxs --outdir runs/perf"
